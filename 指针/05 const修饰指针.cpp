#include<iostream>
using namespace std;
/*
我自己是这样理解的，
1、数据类型

声明我需要一个多大的内存

2、运算符

加减乘除、取模、大于、等于、小于、自增自减之类的。进行数学计算和赋值的

3、const常量

声明某个内存中的内容不允许修改

4、* 指针

声明某个变量/常量是一个指针

5、* 解指针

将内存中存储的数据取出来，这个数据会被当成内存地址Addr，接下来的操作都被当成处理Addr中存储的数据






比如 int 表示，“声明一个4字节的内存”。

int p 表示，“声明一个4字节的内存” 然后 “用p表示这4字节内存中的内容”

int p = 10 表示：“声明一个4字节的内存” 然后 “用p表示这4字节内存中的内容” 然后 “将10塞入这个4字节的内存中”函数

也就是说，按照优先级，从左到右的顺序执行。


然后我们再来看指针：

int a = 10;
int b = 10;

// 声明需要一个4字节的内存 然后 
// 声明下一个变量是指针
// 然后
// 声明p1表示这四字节内存中的内容 然后 
// 获取a变量的地址 然后
// 将a变量的地址塞进p1表示的这个内存
int* p1 = &a; 


// 指向常量的指针
// 声明接下来的内存中的内容不允许修改 然后 
// 获取一个4字节的内存 然后
// 声明下一个变量是指针 然后
// 声明p2表示这四个字节内存中的内容 然后
// 获取a变量的地址 然后
// 将a变量的地址塞进p2表示的这个内存


// 因为距离const最近的是 声明一个4字节的内存，
// 也就是说，这4个字节的内存的内容是不允许修改的
// 而这4个字节的内存是用来存储 *p2的，也就说*p2就不能修改了

const int* p2 = &a; 
p2 = &b;	// 正确
// *p2 = 100; // 报错，error C3892: “p1”: 不能给常量赋值


// 指针常量
// 声明一个4字节的内存	然后
// 声明下一个变量是指针 然后
// 声明下一个变量是常量 然后
// 用p3表示这4个字节的内存 然后
// 获取a的地址
// 将a的地址塞进p3表示的这个内存

// 因为距离const 最近的是 用p3表示这4个字节的内存
// 也就是说，p3代表的内存是不允许修改的
// 所以 p3 = 20; 报错

// *p3则是表示解指针，也就是
// 取出 p3 表示的内存中的内容,根据这个内容，找到 a 的内存地址
// 修改a内存地址中的内容

int* const p3 = &a;
//p3 = &b; // 错误, error C3892: “p2”: 不能给常量赋值
*p3 = 20;

所以，指向指针的常量和指针常量的区别在于

指向常量的指针：const 直接修饰 *p

指针本身是常量： const 直接修饰的是 p

*/
int main5() {

	int a = 10;
	int b = 10;
	// 指向常量的指针
	
	// const修饰的是*p，指针指向可以改，指针指向的值不可以修改
	// 就像租客租房，住址可以变，但是住的人始终是同一个
	// 也就是说，常量指针可以改变某一个值所存的内存地址

	// 可以这样理解，const int * 或者 int const *,距离 * 最近的修饰符是const，
	// *表示 解指针，也就是说, const * 表示 解指针 这个运算结果是常量
	// 

	const int* p1 = &a; // 这种写法也是对的
	// int const* p1 = &a; // 写成这样方便理解， const 修饰 *（const修饰指针）
	p1 = &b;	// 正确
	// *p1 = 100; // 报错，error C3892: “p1”: 不能给常量赋值
	
	// 指针常量 = 指针本身是常量
	
	// p2是变量，const p2就是常量，所以 int* const p2就叫指针常量
	// const修饰的是常量，指针指向不可以改，指针指向的值可以改
	// 就像当房东，房子地址不能变，但是住在房子里的人可以变
	// 也就是说，内存地址不能变，但是地址内容可以变
	// 也就是说，指针常量可以改变某个内存里存的内容


	// 可以这样理解：const p2 , 
	// const 直接修饰了p2， 表示p2本身是常量， p2被赋值为 &a; 之后就不能再改了 p2就不能再被赋值了
	// *p2表示解指针，也就是，将p2里存的东西，也就是变量a的地址，再根据这个地址去找a内存中的值.
	// 这个行为本身修改的是a内存的值，并没有改变p2内存中的值
	int* const p2 = &a;
	//p2 = &b; // 错误, error C3892: “p2”: 不能给常量赋值
	// p2 = 20;
	cout << a << endl; // 20

	// const 既修饰指针，又修饰常量
	// 指针的指向和指针指向的值都不可以修改
	const int* const p3 = &a;
	// p3 = &b; // 错误
	// *p3 = 20; // 错误
	system("pause");

	return 0;
}